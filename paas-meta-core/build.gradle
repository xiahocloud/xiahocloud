plugins {
    id 'java'
    id 'application'
    id 'io.freefair.lombok' version '8.10'
}

// 从父级配置文件读取通用版本信息
version = findProperty('version') ?: '1.0.0'
group = findProperty('group') ?: 'com.xiahou.yu'

java {
    sourceCompatibility = JavaVersion.valueOf("VERSION_${findProperty('javaVersion') ?: '21'}")
    targetCompatibility = JavaVersion.valueOf("VERSION_${findProperty('javaVersion') ?: '21'}")
}

compileJava {
    options.release = Integer.parseInt(findProperty('javaVersion') ?: '21')
    options.compilerArgs += ['--enable-preview']
}

compileTestJava {
    options.release = Integer.parseInt(findProperty('javaVersion') ?: '21')
    options.compilerArgs += ['--enable-preview']
}

test {
    jvmArgs += ['--enable-preview']
    useJUnitPlatform()
}

application {
    mainClass = findProperty('mainClass') ?: 'com.xiahou.yu.paasmetacore.MetaModelDemo'
}

repositories {
    mavenCentral()
}

dependencies {

    // Lombok支持 - 使用统一版本
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // CGLib动态代理 - 使用统一版本
    implementation "cglib:cglib:${cglibVersion}"

    // XML处理 - 使用统一版本
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:${jakartaXmlBindVersion}"
    implementation "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    implementation "org.glassfish.jaxb:jaxb-core:${jaxbRuntimeVersion}"

    // DOM4J XML解析 - 使用统一版本
    implementation "org.dom4j:dom4j:${dom4jVersion}"
    implementation "jaxen:jaxen:${jaxenVersion}"

    // JSON处理 - 使用统一版本
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // 日志框架 - 使用统一版本
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"

    // 工具类库 - 使用统一版本
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
    implementation "org.apache.commons:commons-collections4:${commonsCollections4Version}"
    implementation "commons-io:commons-io:${commonsIoVersion}"

    // Apache Commons BeanUtils - 使用统一版本
    implementation "commons-beanutils:commons-beanutils:${commonsBeanutilsVersion}"

    // Google Guava - 使用统一版本
    implementation "com.google.guava:guava:${guavaVersion}"

    // Spring框架 - 使用统一版本
    implementation "org.springframework:spring-context:${springFrameworkVersion}"
    implementation "org.springframework:spring-core:${springFrameworkVersion}"
    implementation "org.springframework:spring-beans:${springFrameworkVersion}"
    implementation "org.springframework:spring-expression:${springFrameworkVersion}"

    // Spring Boot - 使用统一版本
    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-logging:${springBootVersion}"

    // 反射工具 - 使用统一版本
    implementation "org.reflections:reflections:${reflectionsVersion}"

    // 验证框架 - 使用统一版本
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationVersion}"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"

    // 测试框架 - 使用统一版本
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"

    // Spring Boot测试支持
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

    // 测试容器支持
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"

    // 性能测试工具
    testImplementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
    testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
}

// JMH基准测试配置
configurations {
    jmh
}

// 测试配置优化
test {
    maxHeapSize = "1G"
    systemProperty 'java.awt.headless', 'true'
    systemProperty 'file.encoding', 'UTF-8'
}

// 编译配置优化
compileJava {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
    options.forkOptions.jvmArgs = ['-Xmx2g']
}

// JAR构建配置
jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Main-Class': application.mainClass
        )
    }
}
